<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bob</name>
    </assembly>
    <members>
        <member name="T:Bob.Call">
            <summary>
            A class to store all calls.
            </summary>
        </member>
        <member name="F:Bob.Call.method">
            <summary>
            The method to which this call belongs.
            </summary>
        </member>
        <member name="F:Bob.Call.name">
            <summary>
            The full name of this call, e.g. "Bob".
            </summary>
        </member>
        <member name="F:Bob.Call.notations">
            <summary>
            A list of possible notations of this call. Sould be lower case or a symbol, as calling positions are uppercase.
            </summary>
        </member>
        <member name="F:Bob.Call.place_notations">
            <summary>
            The place notations which make up the call.
            </summary>
        </member>
        <member name="F:Bob.Call.calling_positions">
            <summary>
            A list of strings which contain the possible calling positions for the call, indexed from zero.  Each string should be a list of the possible alternative calling positions, e.g. "IB" for In and Before.
            </summary>
        </member>
        <member name="F:Bob.Call.every">
            <summary>
            Every how many changes the call can be called.  Must be a factor of the lead length of the method.  For lead end calls this is set automagically.
            </summary>
        </member>
        <member name="F:Bob.Call.from">
            <summary>
            How many changes away from every `every` changes the call can be called.  E.g. for Stedman this will be -3, and `every` will be 6.  For lead-end calls this is set automagically.
            </summary>
        </member>
        <member name="F:Bob.Call.cover">
            <summary>
            How many plain changes this call covers, because CCCBR now allow calls to extend the lead length of a method.  For lead end calls this is set automagically.
            </summary>
        </member>
        <member name="P:Bob.Call.overall_transposition">
            <summary>
            The overall transposition caused by the call (note this is not the lead end after the call).
            </summary>
        </member>
        <member name="P:Bob.Call.is_plain">
            <summary>
            True if the call is a `plain` call, otherwise false.  In BobC# these exist, so that call list touches (e.g. PPBPS) work properly.
            </summary>
        </member>
        <member name="P:Bob.Call.length">
            <summary>
            The number of changes which the change covers.
            </summary>
        </member>
        <member name="P:Bob.Call.preferred_notation">
            <summary>
            The preferred notation of the call (this is always the first value in the list of notations).
            </summary>
        </member>
        <member name="M:Bob.Call.GetCallingPositionIndex(System.Char)">
            <summary>
            Gets the index (from 0) of the calling position denoted by `notation`.
            </summary>
            <param name="notation">The notation of the calling position who's index is wanted.</param>
            <returns>The index of calling position denotated by `notation`.</returns>
        </member>
        <member name="M:Bob.Call.Init">
            <summary>
            Initialises the call (right now it just calls an exception if `every` is not a factor of the method's lead length).
            </summary>
        </member>
        <member name="M:Bob.Call.#ctor(Bob.Method,System.String,System.Char[],Bob.PlaceNotation[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a call without calling positions.
            </summary>
            <param name="method">The method to which this call belongs.</param>
            <param name="name">The full name of the call, e.g. "Bob".</param>
            <param name="notations">A list of possible notations, e.g. ['-'. 'b'].  Should be lower case.</param>
            <param name="place_notations">A list of the place notations which make up the call.</param>
            <param name="every">Every how many changes the call can be called.</param>
            <param name="from">How many changes from the `every` changes the call can be called.  E.g. for Stedman, this is -3 and `every` is 6.</param>
            <param name="cover">How many plain course changes this change covers (CCCBR now allow calls which change the lead length of the method).</param>
        </member>
        <member name="M:Bob.Call.#ctor(Bob.Method,System.String,System.Char[],Bob.PlaceNotation,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a single change call without calling positions.
            </summary>
            <param name="method">The method to which this call belongs.</param>
            <param name="name">The full name of the call, e.g. "Bob".</param>
            <param name="notations">A list of possible notations, e.g. ['-'. 'b'].  Should be lower case.</param>
            <param name="place_notation">The place notation of the call.</param>
            <param name="every">Every how many changes the call can be called.</param>
            <param name="from">How many changes from the `every` changes the call can be called.  E.g. for Stedman, this is -3 and `every` is 6.</param>
            <param name="cover">How many plain course changes this change covers (CCCBR now allow calls which change the lead length of the method).</param>
        </member>
        <member name="M:Bob.Call.#ctor(Bob.Method,System.String,System.Char[],Bob.PlaceNotation[],System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a call with calling positions.
            </summary>
            <param name="method">The method to which this call belongs.</param>
            <param name="name">The full name of the call, e.g. "Bob".</param>
            <param name="notations">A list of possible notations, e.g. ['-'. 'b'].  Should be lower case.</param>
            <param name="place_notations">A list of the place notations which make up the call.</param>
            <param name="calling_positions">A list of strings containing (per place) every possible notations (should be upper case).</param>
            <param name="every">Every how many changes the call can be called.</param>
            <param name="from">How many changes from the `every` changes the call can be called.  E.g. for Stedman, this is -3 and `every` is 6.</param>
            <param name="cover">How many plain course changes this change covers (CCCBR now allow calls which change the lead length of the method).</param>
        </member>
        <member name="M:Bob.Call.#ctor(Bob.Method,System.String,System.Char[],Bob.PlaceNotation,System.String[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a single change call with calling positions.
            </summary>
            <param name="method">The method to which this call belongs.</param>
            <param name="name">The full name of the call, e.g. "Bob".</param>
            <param name="notations">A list of possible notations, e.g. ['-'. 'b'].  Should be lower case or symbols.</param>
            <param name="place_notation">The place notation of the call.</param>
            <param name="calling_positions">A list of strings containing (per place) every possible notations (should be upper case).</param>
            <param name="every">Every how many changes the call can be called.</param>
            <param name="from">How many changes from the `every` changes the call can be called.  E.g. for Stedman, this is -3 and `every` is 6.</param>
            <param name="cover">How many plain course changes this change covers (CCCBR now allow calls which change the lead length of the method).</param>
        </member>
        <member name="M:Bob.Call.LeadEndCall(Bob.Method,System.String,System.Char[],Bob.PlaceNotation[])">
            <summary>
            Creates a given call over the lead end of a given method (without calling positions).
            </summary>
            <param name="method">The method to which this call belongs.</param>
            <param name="name">The full name of the call, e.g. "Bob".</param>
            <param name="notations">A list of possible notations, e.g. ['-'. 'b'].  Should be lower case or symbols.</param>
            <param name="place_notations">A list of the place notations which make up the call.</param>
            <returns>A call over the lead end of the given method.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndCall(Bob.Method,System.String,System.Char[],Bob.PlaceNotation[],System.String[])">
            <summary>
            Creates a given call over the lead end of a given method (with calling positions).
            </summary>
            <param name="method">The method to which this call belongs.</param>
            <param name="name">The full name of the call, e.g. "Bob".</param>
            <param name="notations">A list of possible notations, e.g. ['-'. 'b'].  Should be lower case or symbols.</param>
            <param name="place_notations">A list of the place notations which make up the call.</param>
            <param name="calling_positions">A list of strings containing (per place) every possible notations (should be upper case).</param>
            <returns>A call over the lead end of the given method.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndBob(Bob.Method,Bob.PlaceNotation[],System.String[])">
            <summary>
            Creates a `bob` call over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="place_notations">A list of the place notations which make up the call.</param>
            <param name="calling_positions">A list of strings containing (per place) every possible notations (should be upper case).  If null, standard calling positions will be generated.</param>
            <returns>The `bob` call that was created.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndBob(Bob.Method,Bob.PlaceNotation,System.String[])">
            <summary>
            Creates a `bob` call over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="place_notation">The place notation of the call.</param>
            <param name="calling_positions">A list of strings containing (per place) every possible notations (should be upper case).  If null, standard calling positions will be generated.</param>
            <returns>The `bob` call that was created.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndBob(Bob.Method,System.String,System.String[])">
            <summary>
            Creates a `bob` call over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="notation">The full place notation of the call, e.g. "3.1" for Grandsire Bobs.</param>
            <param name="calling_positions">A list of strings containing (per place) every possible notations (should be upper case).  If null, standard calling positions will be generated.</param>
            <returns>The `bob` call that was created.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndSingle(Bob.Method,Bob.PlaceNotation[],System.String[])">
            <summary>
            Creates a `single` call over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="place_notations">A list of the place notations which make up the call.</param>
            <param name="calling_positions">The array of calling positions by place at the lead end.</param>
            <returns>The `single` call that was created.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndSingle(Bob.Method,Bob.PlaceNotation,System.String[])">
            <summary>
            Creates a `single` call over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="place_notation">The place notation of the call.</param>
            <param name="calling_positions">The array of calling positions by place at the lead end.</param>
            <returns>The `single` call that was created.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndSingle(Bob.Method,System.String,System.String[])">
            <summary>
            Creates a `single` call over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="notation">The full place notation of the call, e.g. "3.123" for Grandsire Singles.</param>
            <param name="calling_positions">The array of calling positions by place at the lead end.</param>
            <returns>The `single` call that was created.</returns>
        </member>
        <member name="M:Bob.Call.LeadEndPlain(Bob.Method,System.Int32)">
            <summary>
            Creates a `plain` call (a call which does nothing) over the lead end of a given method.
            </summary>
            <param name="method">The method to which the call belongs.</param>
            <param name="length">How many changes the call covers.</param>
            <returns></returns>
        </member>
        <member name="F:Bob.Call.bob_name">
            <summary>
            The standard full name for any `bob` calls.
            </summary>
        </member>
        <member name="F:Bob.Call.single_name">
            <summary>
            The standard full name for any `single` calls.
            </summary>
        </member>
        <member name="F:Bob.Call.plain_name">
            <summary>
            The standard full name for any `plain` calls.
            </summary>
        </member>
        <member name="P:Bob.Call.bob_notations">
            <summary>
            List of standard notations for bobs. Defaults to ['-', 'b'].
            </summary>
        </member>
        <member name="P:Bob.Call.single_notations">
            <summary>
            List of standard notations for singles. Defaults to ['s'].
            </summary>
        </member>
        <member name="P:Bob.Call.plain_notations">
            <summary>
            List of standard notations for plain calls. Defaults to ['m', 'p'].
            </summary>
        </member>
        <member name="P:Bob.Call.standard_calling_positions_bob">
            <summary>
            Gets the standard calling positions for lead-end bobs.
            </summary>
        </member>
        <member name="P:Bob.Call.standard_calling_positions_single">
            <summary>
            Gets the standard calling positions for lead-end singles.
            </summary>
        </member>
        <member name="T:Bob.CalledChange">
            <summary>
            A class to store called changes.
            </summary>
        </member>
        <member name="T:Bob.CalledChange.CallingType">
            <summary>
            An enum to store what method of determining the call is used.
            </summary>
        </member>
        <member name="F:Bob.CalledChange.CallingType.ByBellCalledUp">
            <summary>
            Called by calling a given bell up (see <see cref="P:Bob.CalledChange.bell_called_up"/>).
            </summary>
        </member>
        <member name="F:Bob.CalledChange.CallingType.ByBellCalledDown">
            <summary>
            Called by calling a given bell down (see <see cref="P:Bob.CalledChange.bell_called_down"/>).
            </summary>
        </member>
        <member name="F:Bob.CalledChange.CallingType.ByPlaceCalledUp">
            <summary>
            Called by calling a bell in a given place up (see <see cref="P:Bob.CalledChange.place_called_up"/>).
            </summary>
        </member>
        <member name="F:Bob.CalledChange.calling_type">
            <summary>
            The type of called change.
            </summary>
        </member>
        <member name="P:Bob.CalledChange.bell_called_up">
            <summary>
            The bell who will be called up.  (e.g. "&lt;this bell&gt; follow &lt;other bell&gt;").
            </summary>
        </member>
        <member name="P:Bob.CalledChange.bell_called_down">
            <summary>
            The bell who will be called down.  (e.g. "&lt;other bell&gt; follow &lt;this bell&gt;").
            </summary>
        </member>
        <member name="P:Bob.CalledChange.place_called_up">
            <summary>
            The place (indexed from zero) of the first bell to be swapped, e.g. `2` would represent "3 follow 4" from rounds.
            </summary>
        </member>
        <member name="M:Bob.CalledChange.GetArray(Bob.Change)">
            <summary>
            Gets the array caused by this transposition.  Implements <see cref="T:Bob.ITransposition"/>.
            </summary>
            <returns>The array representing the transposition caused by this called change.</returns>
        </member>
        <member name="M:Bob.CalledChange.#ctor(Bob.CalledChange.CallingType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Bob.CalledChange"/> object.  I don't reccomend using this; use 
            </summary>
            <param name="calling_type">The way this called change is called.</param>
            <param name="bell_called_up">The bell (indexed from 0) which is called up.</param>
            <param name="bell_called_down">The bell (indexed from 0) which is called down.</param>
            <param name="place_called_up">The place (indexed from 0) of the bell which is called up.</param>
        </member>
        <member name="M:Bob.CalledChange.ByPlaceCalledUp(System.Int32)">
            <summary>
            Creates a called change guided by place.
            </summary>
            <param name="place_called_up">The place of the lower bell which will be swapped.</param>
        </member>
        <member name="M:Bob.CalledChange.ByPlaceCalledUp(System.Char)">
            <summary>
            Creates a called change guided by place.
            </summary>
            <param name="place_called_up">The place of the lower bell which will be swapped.</param>
        </member>
        <member name="M:Bob.CalledChange.ByBellCalledUp(System.Int32)">
            <summary>
            Creates a called change guided by which bell is called over another bell.
            </summary>
            <param name="bell_called_up">The number (indexed from 0) of the bell which will moved up a place.</param>
        </member>
        <member name="M:Bob.CalledChange.ByBellCalledUp(System.Char)">
            <summary>
            Creates a called change guided by which bell is called over another bell.
            </summary>
            <param name="bell_called_up">The number (indexed from 0) of the bell which will moved up a place.</param>
        </member>
        <member name="M:Bob.CalledChange.ByBellCalledDown(System.Int32)">
            <summary>
            Creates a called change guided by which bell is called under another bell.
            </summary>
            <param name="bell_called_down">The number (indexed from 0) of the bell which will moved downra a place.</param>
        </member>
        <member name="M:Bob.CalledChange.ByBellCalledDown(System.Char)">
            <summary>
            Creates a called change guided by which bell is called under another bell.
            </summary>
            <param name="bell_called_down">The number (indexed from 0) of the bell which will moved downra a place.</param>
        </member>
        <member name="T:Bob.Change">
            <summary>
            A class to store rows of ringing, as well as all transpositions (Change objects are read-only).
            </summary>
        </member>
        <member name="P:Bob.Change.array">
            <summary>
            The array of integers (indexed from 0) which represent the change.
            </summary>
        </member>
        <member name="P:Bob.Change.Item(System.Int32)">
            <summary>
            Gets the bell at some index in the change.
            </summary>
            <param name="i">The index of the bell (starting from 0).</param>
            <returns>The index of the bell in that position (starting from 0).</returns>
        </member>
        <member name="P:Bob.Change.stage">
            <summary>
            Gets the stage of this change.
            </summary>
        </member>
        <member name="P:Bob.Change.parity">
            <summary>
            Gets the parity (oddness/evennes) of the change.  This depends on how many called changes are required to get to this change.
            </summary>
        </member>
        <member name="P:Bob.Change.order">
            <summary>
            Gets the number of times the change can be repeated before returning to rounds.
            </summary>
        </member>
        <member name="P:Bob.Change.clone">
            <summary>
            Gets a cloned copy of the change.
            </summary>
        </member>
        <member name="P:Bob.Change.rotating_sets">
            <summary>
            Returns a jagged 2D array of sets of bells which follow a common path when this change is repeated.
            </summary>
            <example>
            In the change "1245376", the 1 and 2 follow their own path; the 3, 4 and 5 rotate together, and the 6 and 7 repeatedly swap.
            Therefore the array (indexing from 0) would be [ [0], [1], [2, 3, 4], [6, 7] ].
            </example>
        </member>
        <member name="P:Bob.Change.rotating_sets_as_string">
            <summary>
            Gets the rotating sets of this change as a string, to prevent user conversions.
            </summary>
        </member>
        <member name="M:Bob.Change.Transpose(Bob.ITransposition)">
            <summary>
            Transposes this change by another transposable object, e.g. place notations and other changes.
            </summary>
            <param name="transposable">The transposable object by which this change will be transposed.</param>
            <returns>The transposed change.</returns>
        </member>
        <member name="M:Bob.Change.IndexOf(System.Int32)">
            <summary>
            Gets the index of a given bell (all indices from 0).
            </summary>
            <param name="bell">The bell you want to find the index of (indexing from 0).</param>
            <returns>The index (from 0) of the bell.  Returns -1 if the bell isn't in the change.</returns>
        </member>
        <member name="M:Bob.Change.GetArray(Bob.Change)">
            <summary>
            Gets the array of the change.  Implements <see cref="T:Bob.ITransposition"/>.
            </summary>
            <returns>The array representing the transposition caused by this change.</returns>
        </member>
        <member name="M:Bob.Change.#ctor(System.Int32[])">
            <summary>
            Creates a change from an integer array.
            </summary>
            <param name="array">The array of bells (indexed from 0) in the change you want to create.</param>
        </member>
        <member name="M:Bob.Change.#ctor(System.String)">
            <summary>
            Creates a change from the text (e.g. "13256478").
            </summary>
            <param name="text">The text representing your change.</param>
        </member>
        <member name="M:Bob.Change.op_Multiply(Bob.Change,Bob.ITransposition)">
            <summary>
            Shorthand for transposing a changes by any transposable object.
            </summary>
            <param name="change">The change which is being transposed.</param>
            <param name="transposition">The object which the change is being transposed by.</param>
            <returns>The transposed change.</returns>
        </member>
        <member name="M:Bob.Change.op_Multiply(Bob.Change,Bob.PlaceNotation[])">
            <summary>
            Shorthand for transposing a change by a list of place notations, e.g. a list of the place notations in a plain lead of a method.
            </summary>
            <param name="change">The change which is being transposed.</param>
            <param name="place_notations">The list of place notations over which the change will be transposed.</param>
            <returns>The transposed change.</returns>
        </member>
        <member name="M:Bob.Change.op_Equality(Bob.Change,Bob.Change)">
            <summary>
            Checks whether changes `a` and `b` are equal.
            </summary>
            <param name="a">The left hand change.</param>
            <param name="b">The right hand change.</param>
            <returns>True if the changes are equal, otherwise false.</returns>
        </member>
        <member name="M:Bob.Change.op_Inequality(Bob.Change,Bob.Change)">
            <summary>
            Checks whether changes `a` and `b` are not equal.
            </summary>
            <param name="a">The left hand change.</param>
            <param name="b">The right hand change.</param>
            <returns>False if the changes are equal, otherwise true.</returns>
        </member>
        <member name="M:Bob.Change.Rounds(Bob.Stage)">
            <summary>
            Gets a change representing rounds on a given stage.
            </summary>
            <param name="stage">The stage which you want rounds for.</param>
            <returns>A change representing rounds.</returns>
        </member>
        <member name="M:Bob.Change.RotatingSetsToString(System.Int32[][])">
            <summary>
            Converts a jagged array of rotating sets into a human readable string.
            </summary>
            <param name="rotating_sets">The jagged array of rotating sets.</param>
            <returns>A human readable string representing the rotating sets.</returns>
        </member>
        <member name="M:Bob.Change.Equals(System.Object)">
            <summary>
            Determines whether this change equals another object.
            </summary>
            <param name="obj">The other change.</param>
            <returns>True if this change is equal to `obj`, otherwise false.</returns>
        </member>
        <member name="M:Bob.Change.GetHashCode">
            <summary>
            Gets the integer hash code of the change (the compiler wanted me to do this).
            </summary>
            <returns>The hash code of this change.</returns>
        </member>
        <member name="M:Bob.Change.ToString">
            <summary>
            Generates a human readable string representation of this change, as you would expect it to be written.
            </summary>
            <returns>A string representing the change.</returns>
        </member>
        <member name="T:Bob.Constants">
            <summary>
            A static class to store the generic constants for BobC#
            </summary>
        </member>
        <member name="F:Bob.Constants.bell_names">
            <summary>
            A string of all bell names (basically, rounds will always be a substring of this string).
            </summary>
        </member>
        <member name="F:Bob.Constants.tenor">
            <summary>
            An integer to represent the heaviest bell (used when specifying which bell is conducting).
            </summary>
        </member>
        <member name="F:Bob.Constants.alpha">
            <summary>
            A string of every lowercase character.
            </summary>
        </member>
        <member name="F:Bob.Constants.ALPHA">
            <summary>
            A string of every uppercase character.
            </summary>
        </member>
        <member name="F:Bob.Constants.int_value_lookup">
            <summary>
            The string used to compress small integers into a 1 char storage value.
            </summary>
        </member>
        <member name="M:Bob.Constants.GetBellNameIndexingFromZero(System.Int32)">
            <summary>
            Gets the bell name representing bell `n` where the treble is bell #0.
            </summary>
            <param name="n">The requested bell's index.</param>
            <returns>The character representing bell `n`.</returns>
        </member>
        <member name="M:Bob.Constants.GetBellNameIndexingFromOne(System.Int32)">
            <summary>
            Gets the bell name representing bell `n` where the treble is bell #1.
            </summary>
            <param name="n">The requested bell's index.</param>
            <returns>The character representing bell `n`.</returns>
        </member>
        <member name="M:Bob.Constants.GetBellIndexFromZero(System.Char)">
            <summary>
            Gets the index of a character representing a bell, where the treble will return 0.
            </summary>
            <param name="value">The character representing a bell.</param>
            <returns>The index (from 0) of the bell.</returns>
        </member>
        <member name="M:Bob.Constants.GetBellIndexFromOne(System.Char)">
            <summary>
            Gets the index of a character representing a bell, where the treble will return 1.
            </summary>
            <param name="value">The character representing a bell.</param>
            <returns>The index (from 1) of the bell.</returns>
        </member>
        <member name="T:Bob.Parity">
            <summary>
            An enum which represents parity (oddness/evenness) of changes.
            </summary>
        </member>
        <member name="F:Bob.Parity.Even">
            <summary>
            An even number of called changes are needed to get from rounds to this change.
            </summary>
        </member>
        <member name="F:Bob.Parity.Odd">
            <summary>
            An odd number of called changes are needed to get from rounds to this change.
            </summary>
        </member>
        <member name="T:Bob.Stage">
            <summary>
            An enum to represent a stage.  They also return the correct number when cast to an int.
            </summary>
        </member>
        <member name="F:Bob.Stage.Singles">
            <summary>
            A method on 3 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Minimus">
            <summary>
            A method on 4 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Doubles">
            <summary>
            A method on 5 bells (usually on 6 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Minor">
            <summary>
            A method on 6 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Triples">
            <summary>
            A method on 7 bells (usually on 8 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Major">
            <summary>
            A method on 8 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Caters">
            <summary>
            A method on 9 bells (usually on 10 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Royal">
            <summary>
            A method on 10 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Cinques">
            <summary>
            A method on 11 bells (usually on 12 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Maximus">
            <summary>
            A method on 12 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Sextuples">
            <summary>
            A method on 13 bells (usually on 14 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Fourteen">
            <summary>
            A method on 14 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Septuples">
            <summary>
            A method on 15 bells (usually on 16 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Sixteen">
            <summary>
            A method on 16 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Octuples">
            <summary>
            A method on 17 bells (usually on 18 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Eighteen">
            <summary>
            A method on 18 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Nonuples">
            <summary>
            A method on 19 bells (usually on 20 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.Twenty">
            <summary>
            A method on 20 bells.
            </summary>
        </member>
        <member name="F:Bob.Stage.Decuples">
            <summary>
            A method on 21 bells (usually on 22 bells with a tenor cover).
            </summary>
        </member>
        <member name="F:Bob.Stage.TwentyTwo">
            <summary>
            A method on 22 bells.
            </summary>
        </member>
        <member name="T:Bob.Classification">
            <summary>
            An enum to store classifications of methods.
            </summary>
        </member>
        <member name="F:Bob.Classification.Bob">
            <summary>
            A method with a plain hunting treble, where the working bells dodge/make points.
            </summary>
        </member>
        <member name="F:Bob.Classification.Place">
            <summary>
            A method with a plain hunting treble, where the working bells never dodge/make points.
            </summary>
        </member>
        <member name="F:Bob.Classification.SlowCourse">
            <summary>
            A method with a plain hunting treble, and a second hunt bell which makes 2nds over the lead end.
            </summary>
        </member>
        <member name="F:Bob.Classification.Principle">
            <summary>
            A method with no hunt bells (all bells are working bells).
            </summary>
        </member>
        <member name="F:Bob.Classification.TrebleBob">
            <summary>
            A treble-dodge method where no internal places are made as the treble hunts between dodges.
            </summary>
        </member>
        <member name="F:Bob.Classification.Surprise">
            <summary>
            A treble-dodge method where internal places are always made as the treble hunts between dodges.
            </summary>
        </member>
        <member name="F:Bob.Classification.Delight">
            <summary>
            A treble-dodge method where some internal places are made as the treble hunts between changes.
            </summary>
        </member>
        <member name="F:Bob.Classification.TreblePlace">
            <summary>
            A treble-hunting method where the treble's path is symmetric and spends an equal number of blows in every place it visits.
            </summary>
        </member>
        <member name="F:Bob.Classification.Alliance">
            <summary>
            A treble-hunting method where the treble's path is symmetric and spends an non-equal number of blows in every place it visits.
            </summary>
        </member>
        <member name="F:Bob.Classification.Hybrid">
            <summary>
            A treble-hunting method where the treble's path is asymmetric.
            </summary>
        </member>
        <member name="F:Bob.Classification.Differential">
            <summary>
            A method with no hunt bells, but multiple sets of working bells doing different work.
            </summary>
        </member>
        <member name="F:Bob.Classification.Unclassified">
            <summary>
            An unclassifiable method.  This should never be used.
            </summary>
        </member>
        <member name="T:Bob.ITransposition">
            <summary>
            An interface for any transposable object, e.g. Change or PlaceNotation.
            </summary>
        </member>
        <member name="M:Bob.ITransposition.GetArray(Bob.Change)">
            <summary>
            A function to get an integer array representing the transposition of this object.
            </summary>
            <returns>An integer array representing the transposition.</returns>
        </member>
        <member name="T:Bob.Method">
            <summary>
            A class to represent a method.
            </summary>
        </member>
        <member name="T:Bob.Method.HuntBell">
            <summary>
            A class which represents a hunt bell in a method.  HuntBell objects can't be changed once created.
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.bell_number">
            <summary>
            The number of this bell (indexed from zero).
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.path">
            <summary>
            A list of places which form the path of this hunt.
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.stage">
            <summary>
            The stage of the method which owns this hunt bell.
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.is_plain_hunting">
            <summary>
            True if this hunt bell follows a plain hunting path (in any rotation).
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.is_treble_dodging">
            <summary>
            True if this hunt bell follows a treble bobbing path (in any rotation).
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.is_symmetrical">
            <summary>
            True if this hunt bell path is symmetrical.
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.spends_same_number_of_blows_in_each_place">
            <summary>
            True if this hunt bell spends an equal number of blows in every place it visits.
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.is_little">
            <summary>
            True if this hunt bell is little (doesn't cover every place).
            </summary>
        </member>
        <member name="P:Bob.Method.HuntBell.rotated_path">
            <summary>
            The rotated path of this hunt bell, such that if the path is symmetrical, so will this path.  Will be null if no symmetry.
            </summary>
        </member>
        <member name="M:Bob.Method.HuntBell.GenerateRotatedPath">
            <summary>
            Generates the rotated path.
            </summary>
        </member>
        <member name="M:Bob.Method.HuntBell.IsPlainHunting">
            <summary>
            Function to determine whether this hunt bell is plain hunting.
            </summary>
            <returns>True if the hunt bell is plain hunting.</returns>
        </member>
        <member name="M:Bob.Method.HuntBell.IsTrebleDodging">
            <summary>
            Function to determine whether this hunt bell is treble dodging.
            </summary>
            <returns>True if the hunt bell is treble dodging.</returns>
        </member>
        <member name="M:Bob.Method.HuntBell.IsSymmetrical(System.Int32[])">
            <summary>
            Function to determine whether this hunt bell path is symmetrical.
            </summary>
            <returns>True if the hunt bell path is symmetrical.</returns>
        </member>
        <member name="M:Bob.Method.HuntBell.SpendsSameNumberOfBlowsInEachPlace">
            <summary>
            Function to determine whether this hunt bell spends the same number of blows in every place it visits.
            </summary>
            <returns>True if the number of blows in each place is equal.</returns>
        </member>
        <member name="M:Bob.Method.HuntBell.#ctor(System.Int32,System.Int32[],Bob.Stage)">
            <summary>
            Creates a hunt bell object, and lets BobC# set all the boolean values.
            </summary>
            <param name="bell_number">The index (from 0) of the bell represented by this hunt bell.</param>
            <param name="path">The path of this hunt bell as a list of places (indexed from 0).</param>
            <param name="stage">The stage of the method which this hunt bell is part of.</param>
        </member>
        <member name="M:Bob.Method.HuntBell.#ctor(System.Int32,System.Int32[],Bob.Stage,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a hunt bell object, setting all the boolean values manually (not reccomended).
            </summary>
            <param name="bell_number">The index (from 0) of the bell represented by this hunt bell.</param>
            <param name="path">The path of this hunt bell as a list of places (indexed from 0).</param>
            <param name="stage">The stage of the method which this hunt bell is part of.</param>
            <param name="is_plain_hunting">Whether the hunt bell is plain hunting.</param>
            <param name="is_treble_dodging">Whether the hunt bell is treble dodging.</param>
            <param name="is_little">Whether the hunt bell is little.</param>
        </member>
        <member name="T:Bob.Method.MethodNotClassifiedException">
            <summary>
            An exception to be thrown when a method can't be classified.
            </summary>
        </member>
        <member name="T:Bob.Method.SymmetryType">
            <summary>
            An enum to store the symmetry type of a method (used, e.g. for generating calls).
            </summary>
        </member>
        <member name="F:Bob.Method.SymmetryType.Asymmetric">
            <summary>
            This method has asymmetric place notation. Could still have a symmetrical line, e.g. Stedman.
            </summary>
        </member>
        <member name="F:Bob.Method.SymmetryType.PlainBobLike">
            <summary>
            This method is symmetric over the treble's lead.
            </summary>
        </member>
        <member name="F:Bob.Method.SymmetryType.GrandsireLike">
            <summary>
            This methodo is symmetric over the blow after the treble's lead.
            </summary>
        </member>
        <member name="F:Bob.Method.m_place_notation">
            <summary>
            A private field for the string place notation.
            </summary>
        </member>
        <member name="F:Bob.Method.calls">
            <summary>
            A customisable list of call objects, which define the calls in this method.
            </summary>
        </member>
        <member name="F:Bob.Method.name">
            <summary>
            The name of the method (the first part of the title, e.g. "Cambridge").
            </summary>
        </member>
        <member name="F:Bob.Method.classification">
            <summary>
            The classification of the method (e.g. "Surprise").
            </summary>
        </member>
        <member name="F:Bob.Method.stage">
            <summary>
            The stage of this method.
            </summary>
        </member>
        <member name="F:Bob.Method.is_little">
            <summary>
            True if the method should have the tag "Little" in its name.
            </summary>
        </member>
        <member name="F:Bob.Method.is_differential">
            <summary>
            True if the method should have the tag "Differential" in its name.
            </summary>
        </member>
        <member name="F:Bob.Method.override_title">
            <summary>
            Set this to override the auto-generated title.  Defaults to null.
            </summary>
        </member>
        <member name="P:Bob.Method.place_notation">
            <summary>
            The string form of this method's place notation.  Setting this will update all the other fields.
            </summary>
        </member>
        <member name="P:Bob.Method.title">
            <summary>
            The title of the method.  If `override_title` is null, this will generate the title automagically.
            </summary>
        </member>
        <member name="P:Bob.Method.place_notations">
            <summary>
            The decoded place notations for the method.
            </summary>
        </member>
        <member name="P:Bob.Method.plain_lead_changes">
            <summary>
            A list of changes in the plain lead (starting from the change after rounds).
            </summary>
        </member>
        <member name="P:Bob.Method.lead_end">
            <summary>
            The lead end change of the method.
            </summary>
        </member>
        <member name="P:Bob.Method.lead_end_notation">
            <summary>
            The last place notation of the method (even if the treble is not a hunt bell).
            </summary>
        </member>
        <member name="P:Bob.Method.half_lead_notation">
            <summary>
            The middle place notation of the method (and null if the lead length is odd).
            </summary>
        </member>
        <member name="P:Bob.Method.leads_in_plain_course">
            <summary>
            The number of leads in the plain course of this method.
            </summary>
        </member>
        <member name="P:Bob.Method.lead_length">
            <summary>
            The number of changes in one lead of this method.
            </summary>
        </member>
        <member name="P:Bob.Method.plain_course_length">
            <summary>
            The total number of changes in a plain course of this method.
            </summary>
        </member>
        <member name="P:Bob.Method.rotating_sets">
            <summary>
            Gets the rotating sets of the lead end of the method (see <see cref="P:Bob.Change.rotating_sets"/>).
            </summary>
        </member>
        <member name="P:Bob.Method.hunt_bells">
            <summary>
            A list of <see cref="T:Bob.Method.HuntBell"/> object representing the hunt bells in this method. 
            </summary>
        </member>
        <member name="P:Bob.Method.working_bells">
            <summary>
            A list of the indices (from 0) of the working bells (non-hunt bells) in increasing order.
            </summary>
        </member>
        <member name="P:Bob.Method.symmetry_type">
            <summary>
            The symmetry type of the method.
            </summary>
        </member>
        <member name="P:Bob.Method.is_place_method">
            <summary>
            True if all the working bells never dodge (or make points, snap leads, etc).
            </summary>
        </member>
        <member name="P:Bob.Method.main_hunt_bell">
            <summary>
            The 'main' hunt bell of this method.  This is the lowest symmetrical hunt bell, or the lowest hunt bell if no symmetrical hunt bells exists.
            </summary>
        </member>
        <member name="P:Bob.Method.plain_course">
            <summary>
            Generates a <see cref="T:Bob.Touch"/> object representing the plain course of this method.
            </summary>
        </member>
        <member name="P:Bob.Method.plain_coursing_order">
            <summary>
            Gets the coursing order of the plain course of this method, according to leading order.
            </summary>
        </member>
        <member name="P:Bob.Method.is_treble_hunting">
            <summary>
            True if the Treble is plain hunting.
            </summary>
        </member>
        <member name="M:Bob.Method.Classify">
            <summary>
            Automagically sets the <see cref="F:Bob.Method.classification"/> variable.
            </summary>
        </member>
        <member name="M:Bob.Method.GetPathOfBell(System.Int32)">
            <summary>
            Finds the path of any bell as a list of places (indexed from 0).  This is not always the length of the plain course.
            </summary>
            <param name="bell_index">The index (from 0) of the bell.</param>
            <returns>A list of places (index from 0) which represent the bell's path.</returns>
        </member>
        <member name="M:Bob.Method.GetCoursingOrder(Bob.Change,System.Boolean)">
            <summary>
            Gets the coursing order of this method at a given lead end.
            </summary>
            <param name="lead_end">The lead end who's coursing order you want.  If null, will default to rounds.</param>
            <param name="assume_plain_bob_like">Setting this to true will tell the function not to look at leading order (makes this more accurate for methods such as Cambridge).</param>
            <returns>The coursing order of the method as an array indexed from 0.</returns>
        </member>
        <member name="M:Bob.Method.GetCoursingOrderString(Bob.Change,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Gets the coursing order of this method at a given lead end, formatted as a string.
            </summary>
            <param name="lead_end">The lead end who's coursing order you want.  If null, will default to rounds.</param>
            <param name="assume_plain_bob_like">Setting this to true will tell the function not to look at leading order (makes this more accurate for methods such as Cambridge).</param>
            <param name="discard_heavy_bells_in_plain_coursing_order">This will remove all the heavy bells (tenors) which are in the same order as they appear in the plain course.</param>
            <param name="heaviest_bell_to_always_keep">The largest bell which will always be shown in the coursing order (indexed from 0).</param>
            <returns>The formatted coursing order.</returns>
        </member>
        <member name="M:Bob.Method.SetLeadEndCalls(System.String,System.String,System.String[],System.String[])">
            <summary>
            Sets the lead end calls in this method, overwriting them if necessary.
            </summary>
            <param name="bob_notation">The place notation of the bob.  Can be multiple changes long.</param>
            <param name="single_notation">The place notation of the single.  Can be multiple changes long.</param>
            <param name="bob_calling_positions">The calling positions of the bob.</param>
            <param name="single_calling_positions">The calling positions of the single.</param>
        </member>
        <member name="M:Bob.Method.AddPlainCall(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates and adds a new plain call to this method in the requested location.
            </summary>
            <param name="every">Every how many changes this call can be called.</param>
            <param name="from">How many changes away from every `every` changes the call can be called.  E.g. for Stedman this will be -3, and `every` will be 6.  For lead-end calls this is set automagically.</param>
            <param name="length">How many changes long the call is.</param>
        </member>
        <member name="M:Bob.Method.GetCallByName(System.String)">
            <summary>
            Finds a <see cref="T:Bob.Call"/> object by it's full name (see <see cref="F:Bob.Call.name"/>).
            </summary>
            <param name="name">The full name of the call (see <see cref="F:Bob.Call.name"/>).</param>
            <returns>The <see cref="T:Bob.Call"/> object with the given name, or null.</returns>
        </member>
        <member name="M:Bob.Method.GetCallByNotation(System.Char)">
            <summary>
            Finds a <see cref="T:Bob.Call"/> object by it's notation (see <see cref="F:Bob.Call.notations"/>).
            </summary>
            <param name="notation">The notation of the call (see <see cref="F:Bob.Call.notations"/>).</param>
            <returns>The <see cref="T:Bob.Call"/> object with the given notation, or null.</returns>
        </member>
        <member name="M:Bob.Method.TouchFromCallList(Bob.Call[])">
            <summary>
            Generates a <see cref="T:Bob.Touch"/> object from an array of calls in the order that they should be called.
            </summary>
            <param name="calls">An array of <see cref="T:Bob.Call"/> objects in the order that they're called.</param>
            <returns>The requested <see cref="T:Bob.Touch"/> object.</returns>
        </member>
        <member name="M:Bob.Method.TouchFromCallList(System.String)">
            <summary>
            Generates a <see cref="T:Bob.Touch"/> object from a string of call notations, in upper- or lower-case.
            </summary>
            <param name="notation">The string of call notations in the order that they'll be called.</param>
            <returns>The requested <see cref="T:Bob.Touch"/> object.</returns>
        </member>
        <member name="M:Bob.Method.TouchFromCallingPositions(System.String,System.Int32)">
            <summary>
            Generates a <see cref="T:Bob.Touch"/> object from a string representing the calling positions.
            </summary>
            <param name="notation">An array of <see cref="T:Bob.Call"/> objects in the order that they're called.</param>
            <param name="conductor_bell">The bell index (from 0) from which the touch is called.</param>
            <returns>The requested <see cref="T:Bob.Touch"/> object.</returns>
        </member>
        <member name="M:Bob.Method.GenerateExtents(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds the list of all possible extents, and returns their notations as call lists.  Warning: it's not a good idea to run this on stages higher than Major, because it will take a LONG time.
            </summary>
            <param name="possible_call_notations">The list of calls notations used to create the extents (includes plain leads).  If null, it will use all possible call notations.</param>
            <param name="extent_length_limit">The longest extent notation that will be computed.</param>
            <param name="stop_after_extent_number">The function will stop when this many exents are reached.</param>
            <param name="add_to_extent_notations">If set to true, the function will continue computing touches which start with a legit extent, thus flagging up unneccessary repeats.</param>
            <param name="print">If set to true, this function will print out what it's doing.  Useful for long computations.</param>
            <returns>All possible extents of this method, as call lists.</returns>
        </member>
        <member name="M:Bob.Method.GenerateExtents(System.Char[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Finds the list of all possible extents, and returns their notations as call lists.  Warning: it's not a good idea to run this on stages higher than Major, because it will take a LONG time.
            </summary>
            <param name="possible_call_notations">The list of calls notations used to create the extents (includes plain leads).  If null, it will use all possible call notations.</param>
            <param name="extent_length_limit">The longest extent notation that will be computed.</param>
            <param name="stop_after_extent_number">The function will stop when this many exents are reached.</param>
            <param name="add_to_extent_notations">If set to true, the function will continue computing touches which start with a legit extent, thus flagging up unneccessary repeats.</param>
            <param name="print">If set to true, this function will print out what it's doing.  Useful for long computations.</param>
            <returns>All possible extents of this method, as call lists.</returns>
        </member>
        <member name="M:Bob.Method.HasPlainBobLikeSymmetry">
            <summary>
            Determines whether this method has Plain Bob-like symmetry.
            </summary>
            <returns>True if this method has Plain Bob-like symmetry.</returns>
        </member>
        <member name="M:Bob.Method.HasGrandsireLikeSymmetry">
            <summary>
            Determines whether this method has Grandsire-like symmetry.
            </summary>
            <returns>True if this method has Grandsire-like symmetry.</returns>
        </member>
        <member name="M:Bob.Method.IsPlaceMethod">
            <summary>
            Determines whether the working bells only make places.
            </summary>
            <returns>False if any working bell makes any dodges (or snaps, points, etc.).</returns>
        </member>
        <member name="M:Bob.Method.RefreshNotation">
            <summary>
            Called whenever the method's <see cref="P:Bob.Method.place_notation"/> is updated.
            </summary>
        </member>
        <member name="M:Bob.Method.GenerateStandardCalls(System.Boolean)">
            <summary>
            Generates standard (Bob, Single and Plain) <see cref="T:Bob.Call"/> objects for this method.
            </summary>
            <param name="overwrite_current">Determines whether to overwrite the current call array.</param>
        </member>
        <member name="M:Bob.Method.#ctor(System.String,System.String,Bob.Classification,Bob.Stage,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Generates a method and specifying all classifications.
            </summary>
            <param name="place_notation">The place notation of the method, e.g. "x3x4x25x36x4x5x6x7,2". Can have implicit places.</param>
            <param name="name">The name of the method, e.g. "Cambridge".</param>
            <param name="classification">The classification of the method, e.g. <see cref="F:Bob.Classification.Surprise"/></param>
            <param name="stage">The stage of the method, e.g. <see cref="F:Bob.Stage.Major"/></param>
            <param name="override_title">Set this to manually set the <see cref="P:Bob.Method.title"/> value, e.g. for Gransire.</param>
            <param name="is_little">True if the "Little" tag should appear in the method title.</param>
            <param name="is_differential">True if the "Differential" tag should appear in the method title.</param>
            <param name="generate_standard_calls">If, true BobC# will automagically set the standard Bob, Single and Plain calls.</param>
        </member>
        <member name="M:Bob.Method.#ctor(System.String,System.String,Bob.Stage,System.String,System.Boolean)">
            <summary>
            Generates a method without specifying any classifications, leaving BobC# to classify it for you.
            </summary>
            <param name="place_notation">The place notation of the method, e.g. "x3x4x25x36x4x5x6x7,2". Can have implicit places.</param>
            <param name="name">The name of the method, e.g. "Cambridge".</param>
            <param name="stage">The stage of the method, e.g. <see cref="F:Bob.Stage.Major"/></param>
            <param name="override_title">Set this to manually set the <see cref="P:Bob.Method.title"/> value, e.g. for Gransire.</param>
            <param name="generate_standard_calls">If, true BobC# will automagically set the standard Bob, Single and Plain calls.</param>
        </member>
        <member name="M:Bob.Method.GetMethod(System.String)">
            <summary>
            Gets a method with a given title from the CCCBR method library (null if no method of that title exists).
            </summary>
            <param name="title">The title of the method you want to find.</param>
            <returns>The <see cref="T:Bob.Method"/> object with that title (or null).</returns>
        </member>
        <member name="M:Bob.Method.GenerateTitle(System.String,Bob.Stage,Bob.Classification,System.Boolean,System.Boolean)">
            <summary>
            Generates a method's title given a load of attributes
            </summary>
            <param name="name">The name of the method.</param>
            <param name="stage">The stage of the method.</param>
            <param name="classification">The classification of the method.</param>
            <param name="is_little">True if the tag "Little" should be included in the title.</param>
            <param name="is_differential">True if the tag "Differential" should be included in the title.</param>
            <returns></returns>
        </member>
        <member name="P:Bob.Method.plain_bob_doubles">
            <summary>
            Shortcut to generate Plain Bob Doubles. (Only for testing; use <c>Method.GetMethod ("Plain Bob Doubles")</c> instead).
            </summary>
        </member>
        <member name="P:Bob.Method.plain_bob_minor">
            <summary>
            Shortcut to generate Plain Bob Minor. (Only for testing; use <c>Method.GetMethod ("Plain Bob Minor")</c> instead).
            </summary>
        </member>
        <member name="P:Bob.Method.plain_bob_triples">
            <summary>
            Shortcut to generate Plain Bob Triples. (Only for testing; use <c>Method.GetMethod ("Plain Bob Triples")</c> instead).
            </summary>
        </member>
        <member name="P:Bob.Method.grandsire_doubles">
            <summary>
            Shortcut to generate Grandsire Doubles. (Only for testing; use <c>Method.GetMethod ("Grandsire Doubles")</c> instead).
            </summary>
        </member>
        <member name="P:Bob.Method.grandsire_triples">
            <summary>
            Shortcut to generate Grandsire Triples. (Only for testing; use <c>Method.GetMethod ("Grandsire Triples")</c> instead).
            </summary>
        </member>
        <member name="P:Bob.Method.cambridge_major">
            <summary>
            Shortcut to generate Cambridge Major. (Only for testing; use <c>Method.GetMethod ("Cambridge Surprise Major")</c> instead).
            </summary>
        </member>
        <member name="T:Bob.MethodLibrary">
            <summary>
            A class to store the CCCBR library of methods.
            </summary>
        </member>
        <member name="T:Bob.MethodLibrary.StoredMethod">
            <summary>
            A performant representation of a method, to avoid having to make 20,000+ <see cref="T:Bob.Method"/> objets.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.name">
            <summary>
            The name of the method.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.override_title">
            <summary>
            The title of the method.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.stage">
            <summary>
            The stage of the method.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.place_notation">
            <summary>
            The place notation of the method.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.classification">
            <summary>
            The classification of the method (to speed up loading methods).
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.is_little">
            <summary>
            True if the tag "Little" should be included in the method title.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.is_differential">
            <summary>
            True if the tag "Differential" should be included in the method title.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.title">
            <summary>
            The title of the method.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredMethod.calls">
            <summary>
            An array of calls.  If null, calls will automagically be generated.
            </summary>
        </member>
        <member name="P:Bob.MethodLibrary.StoredMethod.method">
            <summary>
            Generates a proper method object for this method class.
            </summary>
        </member>
        <member name="M:Bob.MethodLibrary.StoredMethod.#ctor(System.String,Bob.Stage,System.String,Bob.Classification,System.Boolean,System.Boolean,Bob.MethodLibrary.StoredCall[],System.String)">
            <summary>
            Creates a new <see cref="T:Bob.MethodLibrary.StoredMethod"/> object.
            </summary>
            <param name="name">The name of the method.</param>
            <param name="stage">The stage of the method.</param>
            <param name="place_notation">The place notation of the method.</param>
            <param name="classification">The classification of the method.</param>
            <param name="is_little">True if the tag "Little" should be included in the method title.</param>
            <param name="is_differential">True if the tag "Differential" should be included in the method title.</param>
            <param name="calls">An array of calls.  If null, calls will automagically be generated.</param>
            <param name="override_title">Set this from null to override the title of the method.</param>
        </member>
        <member name="T:Bob.MethodLibrary.StoredCall">
            <summary>
            A performant representation of call, for use with <see cref="T:Bob.MethodLibrary.StoredMethod"/> objects.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredCall.name">
            <summary>
            The (full) name of the call.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredCall.notations">
            <summary>
            The array of possible notations, with the preferred notation first.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredCall.place_notation">
            <summary>
            The place notation of the call.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredCall.every">
            <summary>
            Every how often the call can be called.  If null, defaults to the method's lead end.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredCall.from">
            <summary>
            The index of the first change of the place notations relative to each repeat of <see cref="F:Bob.MethodLibrary.StoredCall.every"/>.  If null, defaults to 0.
            </summary>
        </member>
        <member name="F:Bob.MethodLibrary.StoredCall.cover">
            <summary>
            How many changes of the original method are taken over by the call.  If null, defaults to the length of the call.
            </summary>
        </member>
        <member name="M:Bob.MethodLibrary.StoredCall.#ctor(System.String)">
            <summary>
            Generates a <see cref="T:Bob.MethodLibrary.StoredCall"/> from the compact string representation.
            </summary>
            <param name="representation"></param>
        </member>
        <member name="M:Bob.MethodLibrary.StoredCall.#ctor(System.String,System.Char[],System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a <see cref="T:Bob.MethodLibrary.StoredCall"/> object.
            </summary>
            <param name="name">The (full) name of the call.</param>
            <param name="notations">The array of possible notations, with the preferred notation first.</param>
            <param name="place_notation">The place notation of the call.</param>
            <param name="every">Every how often the call can be called.  If null, defaults to the method's lead end.</param>
            <param name="from">The index of the last change of the place notations relative to each repeat of <see cref="F:Bob.MethodLibrary.StoredCall.every"/>.  If null, defaults to 0.</param>
            <param name="cover">How many changes of the original method are taken over by the call.  If null, defaults to the length of the call.</param>
        </member>
        <member name="F:Bob.MethodLibrary.stored_methods">
            <summary>
            An array of <see cref="T:Bob.MethodLibrary.StoredMethod"/> objects of every method in the library.
            </summary>
        </member>
        <member name="M:Bob.MethodLibrary.#ctor(System.String)">
            <summary>
            Creates a method library from a compressed text file (`methods.txt`).
            </summary>
            <param name="method_data">Set this to override the default method data.</param>
        </member>
        <member name="M:Bob.MethodLibrary.GetMethodByTitle(System.String)">
            <summary>
            Finds a method with a given title in the CCCBR method library.
            </summary>
            <param name="title">The title of the method.</param>
            <returns>The method with the given title (null if no such method exists in the CCCBR library).</returns>
        </member>
        <member name="P:Bob.MethodLibrary.library">
            <summary>
            Gets/creates a <see cref="T:Bob.MethodLibrary"/> object for the CCCBR method library.
            </summary>
        </member>
        <member name="T:Bob.PlaceNotation">
            <summary>
            A class to represent any single place notation.  Once created, <see cref="T:Bob.PlaceNotation"/> objects cannot be changed.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.notation">
            <summary>
            The string notation for this place notation.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.array">
            <summary>
            An array representing the transposition caused by this place notation.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.places_made">
            <summary>
            An array of places (indexed from 0) made in this place notation.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.compact_notation">
            <summary>
            Gets the compacted notation (i.e. with implicit places removed).
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.stage">
            <summary>
            Gets the stage of this place notation.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.is_12">
            <summary>
            True if this place notation is a "12" or a "12n" place notation.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.is_1n">
            <summary>
            True if this place notation is "1n".  For all odd-staged notations, this returns false.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.is_x">
            <summary>
            True if this place notation is an "X" type notation.
            </summary>
        </member>
        <member name="P:Bob.PlaceNotation.has_internal_places">
            <summary>
            True if this place notation contains internal places (places not at either end of the notation).
            </summary>
        </member>
        <member name="M:Bob.PlaceNotation.GetArray(Bob.Change)">
            <summary>
            Gets the array representing the transposition of this place notation.  Implements <see cref="T:Bob.ITransposition"/>.
            </summary>
            <returns>An array representing this transposition.</returns>
        </member>
        <member name="M:Bob.PlaceNotation.Equals(System.Object)">
            <summary>
            Checks equality between this object and another object.
            </summary>
            <param name="obj">The other object.</param>
            <returns>True if this is equal to `obj`.</returns>
        </member>
        <member name="M:Bob.PlaceNotation.GetHashCode">
            <summary>
            Gets the hash code for this place notation.
            </summary>
            <returns>The hash code summing up this place notation.</returns>
        </member>
        <member name="M:Bob.PlaceNotation.ToString">
            <summary>
            Gets the string representation of this object.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:Bob.PlaceNotation.#ctor(System.String,Bob.Stage)">
            <summary>
            Generates a single <see cref="T:Bob.PlaceNotation"/> object from a string notation and a <see cref="T:Bob.Stage"/>.
            </summary>
            <param name="notation">The string notation of this place notation.</param>
            <param name="stage">The stage of this place notation.</param>
        </member>
        <member name="M:Bob.PlaceNotation.DecodeFullNotation(System.String,Bob.Stage)">
            <summary>
            Converts a string of place notations (with lead end shortcuts, implicit places, etc.) to an array of <see cref="T:Bob.PlaceNotation"/> objects.
            </summary>
            <param name="full_notation">The string of place notations.</param>
            <param name="stage">The <see cref="T:Bob.Stage"/> of the place notations.</param>
            <returns>An array of converted place notations</returns>
        </member>
        <member name="M:Bob.PlaceNotation.CombinePlaceNotations(Bob.PlaceNotation[])">
            <summary>
            Generates the combined transposition caused by consecutively applying an array of place notations.
            </summary>
            <param name="notations">The list of place notations, in the order of transposition.</param>
            <returns>The change representing the combined transposition.</returns>
        </member>
        <member name="M:Bob.PlaceNotation.GenerateChangeArray(Bob.PlaceNotation[],Bob.Change)">
            <summary>
            Generates a list of every change caused by applying each of `notations`.
            </summary>
            <param name="notations">The notations to apply.</param>
            <param name="start_change">Set the start change to something other than rounds.</param>
            <returns></returns>
        </member>
        <member name="M:Bob.PlaceNotation.CompressPlaceNotation(System.String,Bob.Stage)">
            <summary>
            Removes implicit places from a given place notation, as well as adding symmetry.
            </summary>
            <param name="input">The input place notation.</param>
            <param name="stage">The stage on which this place notation is being rung.</param>
            <returns>The place notation compressed as much as possible.</returns>
        </member>
        <member name="F:Bob.PlaceNotation.x_notations">
            <summary>
            A customisable array of possible notations for a 'cross' place notations.
            </summary>
        </member>
        <member name="F:Bob.PlaceNotation.basic_delimiters">
            <summary>
            A customisable array of generic delimiters for between changes.
            </summary>
        </member>
        <member name="F:Bob.PlaceNotation.leadend_delimiters">
            <summary>
            A customisable array of delimiters to represent lead end symmetry.
            </summary>
        </member>
        <member name="M:Bob.PlaceNotation.op_Equality(Bob.PlaceNotation,Bob.PlaceNotation)">
            <summary>
            Operator which returns true if two <see cref="T:Bob.PlaceNotation"/> objects are equal.
            </summary>
            <param name="notation1">The left hand notation.</param>
            <param name="notation2">The right hand notation.</param>
            <returns>True if `notation1` equals `notation2`.</returns>
        </member>
        <member name="M:Bob.PlaceNotation.op_Inequality(Bob.PlaceNotation,Bob.PlaceNotation)">
            <summary>
            Operator which returns true if two <see cref="T:Bob.PlaceNotation"/> objects are not equal.
            </summary>
            <param name="notation1">The left hand notation.</param>
            <param name="notation2">The right hand notation.</param>
            <returns>True if `notation1` does not equals `notation2`.</returns>
        </member>
        <member name="T:Bob.XNotationWithTenorCoverException">
            <summary>
            An exception to be thrown when the 'X' notation is used on an odd-stage method.
            </summary>
        </member>
        <member name="M:Bob.XNotationWithTenorCoverException.#ctor">
            <summary>
            Throws a new exception with no message.
            </summary>
        </member>
        <member name="M:Bob.XNotationWithTenorCoverException.#ctor(System.String)">
            <summary>
            Throws a new exception with a message.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Bob.XNotationWithTenorCoverException.#ctor(System.String,System.Exception)">
            <summary>
            Throw a new exception with a message and another exception.
            </summary>
            <param name="message">The message display.</param>
            <param name="inner">The other exception.</param>
        </member>
        <member name="T:Bob.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bob.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bob.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bob.Properties.Resources.methods">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="T:Bob.SpeedProfiler">
            <summary>
            A class to run profiling tests on C# functions.  Used for development purposes only.
            </summary>
        </member>
        <member name="F:Bob.SpeedProfiler.length">
            <summary>
            The number of different functions to profile independantly.
            </summary>
        </member>
        <member name="M:Bob.SpeedProfiler.Start">
            <summary>
            Starts the profiling session.
            </summary>
        </member>
        <member name="M:Bob.SpeedProfiler.Profile">
            <summary>
            Records the time since Profile () or Start () were last called.
            </summary>
        </member>
        <member name="M:Bob.SpeedProfiler.Print(System.String[],System.String)">
            <summary>
            Prints a string of the profile with optional formatting.
            </summary>
            <param name="names">A list of names of each function.</param>
            <param name="delimiter">A delimiter which goes between each name and its average time.</param>
        </member>
        <member name="M:Bob.SpeedProfiler.#ctor(System.Int32)">
            <summary>
            Creates a new SpeedProfiler.
            </summary>
            <param name="length">The number of functions to profile.</param>
        </member>
        <member name="T:Bob.Touch">
            <summary>
            A class to store a representation of any touch.
            </summary>
        </member>
        <member name="T:Bob.Touch.CallPoint">
            <summary>
            A class to store a pairing of a Call and the point at which it is called.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallPoint.call">
            <summary>
            The call which is being called.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallPoint.start_index">
            <summary>
            The index of the first change which the call is called.
            </summary>
        </member>
        <member name="P:Bob.Touch.CallPoint.length">
            <summary>
            The number of changes covered by this <see cref="T:Bob.Touch.CallPoint"/>.
            </summary>
        </member>
        <member name="P:Bob.Touch.CallPoint.end_index">
            <summary>
            The index of the last change covered by this <see cref="T:Bob.Touch.CallPoint"/>. 
            </summary>
        </member>
        <member name="M:Bob.Touch.CallPoint.GetNotationAtIndex(System.Int32)">
            <summary>
            Gets the <see cref="T:Bob.PlaceNotation"/> at a given absolute index since the start of the touch.
            </summary>
            <param name="index">The absolute index of the <see cref="T:Bob.PlaceNotation"/>.</param>
            <returns>The place notation at absolute index `index`.</returns>
        </member>
        <member name="M:Bob.Touch.CallPoint.#ctor(Bob.Call,System.Int32)">
            <summary>
            Creates a <see cref="T:Bob.Touch.CallPoint"/> from a call and an index.
            </summary>
            <param name="call">The call being called.</param>
            <param name="start_index">The index of the first change of the call.</param>
        </member>
        <member name="T:Bob.Touch.CallLocationParameters">
            <summary>
            A class to send parameters into <see cref="T:Bob.Touch.ICallLocation"/> methods.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.current_method">
            <summary>
            The current <see cref="T:Bob.Method"/> being rung.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.start_change">
            <summary>
            The last change before the potential call takes effect.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.start_index">
            <summary>
            The number of changes since the start of the touch.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.sub_lead_index">
            <summary>
            The number of changes since the last lead end.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.lead_index">
            <summary>
            The number of lead ends since the start of the touch.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.attempted_calls_since_last_call">
            <summary>
            The number of attempted calls since the last successful calls.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.attempted_splices_since_last_splice">
            <summary>
            The number of attempted splices since the last successful splice.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationParameters.touch">
            <summary>
            The touch from which this class is being generated.
            </summary>
        </member>
        <member name="M:Bob.Touch.CallLocationParameters.#ctor(Bob.Method,Bob.Change,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Bob.Touch)">
            <summary>
            Creates a fully defined <see cref="T:Bob.Touch.CallLocationParameters"/> object.
            </summary>
            <param name="current_method">The current <see cref="T:Bob.Method"/> being rung.</param>
            <param name="start_change">The last change before the potential call takes effect.</param>
            <param name="start_index">The number of changes since the start of the touch.</param>
            <param name="sub_lead_index">The number of changes sinc the last lead end.s</param>
            <param name="lead_index">The number of lead ends since the start of the touch.</param>
            <param name="attempted_calls_since_last_call">The number of calls since the last successful call.</param>
            <param name="attempted_splices_since_last_splice">The number of splices since the last successful splice.</param>
            <param name="touch">The touch from which this class is being generated.</param>
        </member>
        <member name="T:Bob.Touch.ICallLocation">
            <summary>
            An interface for denoting where calls can be called.
            </summary>
        </member>
        <member name="M:Bob.Touch.ICallLocation.EvaluateBasicCall(Bob.Call,Bob.Touch.CallLocationParameters)">
            <summary>
            This should return true if the given data should result in a call being called.
            </summary>
            <param name="call">The call that would be called.</param>
            <param name="parameters">The location where the call would be called.</param>
            <returns>True if the call should be called.</returns>
        </member>
        <member name="M:Bob.Touch.ICallLocation.EvaluateMethodCall(Bob.MethodCall,Bob.Touch.CallLocationParameters)">
            <summary>
            This should return true if the given data should result in a method splice being called.
            </summary>
            <param name="next_method">The method being spliced to.</param>
            <param name="parameters">The location of the potential call.</param>
            <returns>True if the method splice should happen here.</returns>
        </member>
        <member name="T:Bob.Touch.CallLocationList">
            <summary>
            A class to specify the locations of calls which are given as a list (so calls are always called.
            </summary>
        </member>
        <member name="M:Bob.Touch.CallLocationList.EvaluateBasicCall(Bob.Call,Bob.Touch.CallLocationParameters)">
            <summary>
            This should return true if the given data should result in a call being called.
            </summary>
            <param name="call">The call that would be called.</param>
            <param name="parameters">The location where the call would be called.</param>
            <returns>Always true</returns>
        </member>
        <member name="M:Bob.Touch.CallLocationList.EvaluateMethodCall(Bob.MethodCall,Bob.Touch.CallLocationParameters)">
            <summary>
            This should return true if the given data should result in a method splice being called.
            </summary>
            <param name="next_method">The method being spliced to.</param>
            <param name="parameters">The location of the potential call.</param>
            <returns>Always true.</returns>
        </member>
        <member name="T:Bob.Touch.CallLocationCallingPosition">
            <summary>
            A class to specify the location of a calling-position based call.
            </summary>
        </member>
        <member name="F:Bob.Touch.CallLocationCallingPosition.calling_position">
            <summary>
            The notation for the calling position
            </summary>
        </member>
        <member name="M:Bob.Touch.CallLocationCallingPosition.EvaluateBasicCall(Bob.Call,Bob.Touch.CallLocationParameters)">
            <summary>
            This should return true if the given data should result in a call being called.
            </summary>
            <param name="call">The call that would be called.</param>
            <param name="parameters">The location where the call would be called.</param>
            <returns>True if the call should be called.</returns>
        </member>
        <member name="M:Bob.Touch.CallLocationCallingPosition.EvaluateMethodCall(Bob.MethodCall,Bob.Touch.CallLocationParameters)">
            <summary>
            This should return true if the given data should result in a method splice being called.
            </summary>
            <param name="next_method">The method being spliced to.</param>
            <param name="parameters">The location of the potential call.</param>
            <returns>True if the method splice should happen here.</returns>
        </member>
        <member name="M:Bob.Touch.CallLocationCallingPosition.#ctor(System.Char)">
            <summary>
            Creates a <see cref="T:Bob.Touch.CallLocationCallingPosition"/> class given a calling position notation.
            </summary>
            <param name="calling_position">The notation of the calling position.</param>
        </member>
        <member name="T:Bob.Touch.CallLocationCountDown">
            <summary>
            A class to specify that a call should be called after a certain number of attempts.
            </summary>
        </member>
        <member name="P:Bob.Touch.CallLocationCountDown.number_of_attempts">
            <summary>
            The number of attempted calls before the call should actually be called.
            </summary>
        </member>
        <member name="M:Bob.Touch.CallLocationCountDown.EvaluateBasicCall(Bob.Call,Bob.Touch.CallLocationParameters)">
            <summary>
            Determines whether a <see cref="T:Bob.BasicCall"/> should be called.
            </summary>
            <param name="call">The call about to be called.</param>
            <param name="parameters">Extra data about the call location.</param>
            <returns>True if the call should be called.</returns>
        </member>
        <member name="M:Bob.Touch.CallLocationCountDown.EvaluateMethodCall(Bob.MethodCall,Bob.Touch.CallLocationParameters)">
            <summary>
            Determines whether a <see cref="T:Bob.MethodCall"/> should be called.
            </summary>
            <param name="next_method">The <see cref="T:Bob.MethodCall"/> about to be called.</param>
            <param name="parameters">Extra data about the call location.</param>
            <returns>True if the call should be called.</returns>
        </member>
        <member name="M:Bob.Touch.CallLocationCountDown.#ctor(System.Int32)">
            <summary>
            Generates a fully-defined <see cref="T:Bob.Touch.CallLocationCountDown"/> object.
            </summary>
            <param name="number_of_attempts">The number of call attempts before actually calling.  Note that if you want the nth call, you should set this to n - 1 (e.g. the 4th call will have had 3 prior attempts)</param>
        </member>
        <member name="T:Bob.Touch.YourPealRingersDiedOfExhaustionException">
            <summary>
            An exception to call if the peals get too long without coming back to rounds.  In lieu of a way of checking if touches never come back to rounds.
            </summary>
        </member>
        <member name="M:Bob.Touch.YourPealRingersDiedOfExhaustionException.#ctor(System.String)">
            <summary>
            Throws an exception with a message.
            </summary>
            <param name="message">The message to show.</param>
        </member>
        <member name="F:Bob.Touch.start_method">
            <summary>
            The starting method of the touch.
            </summary>
        </member>
        <member name="F:Bob.Touch.method_calls">
            <summary>
            An array of method splicing calls.
            </summary>
        </member>
        <member name="F:Bob.Touch.basic_calls">
            <summary>
            An array of basic (e.g. Bob, Single, Plain) calls and their locations.
            </summary>
        </member>
        <member name="P:Bob.Touch.conductor_bell">
            <summary>
            The bell from which the touch is called.  If set to <see cref="F:Bob.Constants.tenor"/> (-1), then this is set to the heaviest bell.
            </summary>
        </member>
        <member name="P:Bob.Touch.stage">
            <summary>
            The stage of the touch (the largest stage of all the methods spliced, allowing different staged methods to be spliced).
            </summary>
        </member>
        <member name="M:Bob.Touch.ComputeChanges">
            <summary>
            Generates all the changes in the touch (could be computationally intensive).  Called once when <see cref="P:Bob.TouchBase.changes"/> is accessed.
            </summary>
        </member>
        <member name="M:Bob.Touch.#ctor(Bob.Method,Bob.Call[])">
            <summary>
            Creates a touch of a single method, and a list of calls in the order they should be called.
            </summary>
            <param name="method">The method of the touch.</param>
            <param name="calls">The calls in the order they should be called.</param>
        </member>
        <member name="M:Bob.Touch.#ctor(Bob.Method,Bob.BasicCall[],System.Int32)">
            <summary>
            Creates a <see cref="T:Bob.Touch"/> object representing a single-method touch.
            </summary>
            <param name="method">The method of the touch.</param>
            <param name="calls">The calls which make up the touch.</param>
            <param name="conductor_bell">The bell from which the touch is called.</param>
        </member>
        <member name="M:Bob.Touch.#ctor(Bob.Method,Bob.MethodCall[],Bob.BasicCall[],System.Int32)">
            <summary>
            Creates a <see cref="T:Bob.Touch"/> object representing a touch of multiple methods spliced.
            </summary>
            <param name="start_method">The method to start the touch.  Will be added as a <see cref="T:Bob.MethodCall"/> to the start of `method_calls`.</param>
            <param name="method_calls">The splices in methods.</param>
            <param name="calls">The calls (Bobs, Singles, etc.) which make up the touch.</param>
            <param name="conductor_bell">The bell from which the touch is called.</param>
        </member>
        <member name="M:Bob.Touch.#ctor(Bob.Method[],Bob.BasicCall[],System.Int32)">
            <summary>
            Creates a <see cref="T:Bob.Touch"/> object representing a touch of multiple methods spliced lead-by-lead.
            </summary>
            <param name="methods">The methods which will be spliced each lead.</param>
            <param name="calls">The calls (Bobs, Singles, etc.) which make up the touch.</param>
            <param name="conductor_bell">The bell from which the touch is called.</param>
        </member>
        <member name="T:Bob.BasicCall">
            <summary>
            A class to store a basic (Bob, Single, Plain) call.
            </summary>
        </member>
        <member name="F:Bob.BasicCall.call">
            <summary>
            The <see cref="T:Bob.Call"/> being called.
            </summary>
        </member>
        <member name="F:Bob.BasicCall.call_location">
            <summary>
            The location of the call.
            </summary>
        </member>
        <member name="M:Bob.BasicCall.#ctor">
            <summary>
            Creates a blank <see cref="T:Bob.BasicCall"/>.
            </summary>
        </member>
        <member name="M:Bob.BasicCall.#ctor(Bob.Call,Bob.Touch.ICallLocation)">
            <summary>
            Creates a fully-defined <see cref="T:Bob.BasicCall"/>.
            </summary>
            <param name="call">The call being called.</param>
            <param name="call_location">The location of the call.</param>
        </member>
        <member name="T:Bob.MethodCall">
            <summary>
            A class to store method splicing calls.
            </summary>
        </member>
        <member name="F:Bob.MethodCall.method">
            <summary>
            The method to be changed to.
            </summary>
        </member>
        <member name="F:Bob.MethodCall.location">
            <summary>
            The location of the call.
            </summary>
        </member>
        <member name="F:Bob.MethodCall.splice_start_index">
            <summary>
            How far from the lead end of the last method the splice takes effect (should be negative).
            </summary>
        </member>
        <member name="F:Bob.MethodCall.splice_end_index">
            <summary>
            How far through the lead of the next method the splice starts (should be positive).
            </summary>
        </member>
        <member name="M:Bob.MethodCall.#ctor(Bob.Method,Bob.Touch.ICallLocation)">
            <summary>
            Creates a fully-defined <see cref="T:Bob.MethodCall"/> for a lead-end to lead-end splice.
            </summary>
            <param name="method">The <see cref="T:Bob.Method"/> being spliced to.</param>
            <param name="location">The location of the splice.</param>
        </member>
        <member name="M:Bob.MethodCall.#ctor(Bob.Method,Bob.Touch.ICallLocation,System.Int32,System.Int32)">
            <summary>
            Creates a fully-defined <see cref="T:Bob.MethodCall"/> for any splice.
            </summary>
            <param name="method">The <see cref="T:Bob.Method"/> being spliced to.</param>
            <param name="location">The location of the splice.</param>
            <param name="splice_end_index">How far from the lead end of the last method the splice takes effect (should be negative).  See <see cref="F:Bob.MethodCall.splice_start_index"/>.</param>
            <param name="splice_start_index">How far through the lead of the next method the splice starts (should be positive).  See <see cref="F:Bob.MethodCall.splice_end_index"/>.</param>
        </member>
        <member name="T:Bob.TouchBase">
            <summary>
            A base class from which other touch objects inherit.  Contains common functionality between method touches and called change touches.
            </summary>
        </member>
        <member name="F:Bob.TouchBase.margin_calls">
            <summary>
            A dictionary to store where margin calls (placed to the left of the changes) are to be placed (for use in <see cref="M:Bob.TouchBase.ToString"/>).
            </summary>
        </member>
        <member name="F:Bob.TouchBase.right_hand_calls">
            <summary>
            A dictionary to store calls placed to the right of the changes
            </summary>
        </member>
        <member name="F:Bob.TouchBase.lead_ends_line_indices">
            <summary>
            A list of the indices of each lead end in this touch.  Used in <see cref="M:Bob.TouchBase.ToString"/>.
            </summary>
        </member>
        <member name="P:Bob.TouchBase.target_change">
            <summary>
            The change at which the touch will stop.  Defaults to rounds.
            </summary>
        </member>
        <member name="P:Bob.TouchBase.changes">
            <summary>
            An array of all the changes in the touch.  Calls <see cref="M:Bob.TouchBase.ComputeChanges"/> once when accessed.
            </summary>
        </member>
        <member name="P:Bob.TouchBase.Length">
            <summary>
            The number of changes in this touch.
            </summary>
        </member>
        <member name="P:Bob.TouchBase.Item(System.Int32)">
            <summary>
            Gets the change at a given index in the touch.
            </summary>
            <param name="i">The index of the requested change.</param>
            <returns>The change at index `i`.</returns>
        </member>
        <member name="P:Bob.TouchBase.change_repeat_frequencies">
            <summary>
            A dictionary of (key: the number of times each change repeats, value: the number of changes which repeat this many times).
            </summary>
        </member>
        <member name="P:Bob.TouchBase.is_extent">
            <summary>
            True if every possible change is rung once and once only.
            </summary>
        </member>
        <member name="P:Bob.TouchBase.is_multiple_extent">
            <summary>
            True if every possible change is rung an equal number of times. 
            </summary>
        </member>
        <member name="P:Bob.TouchBase.is_true">
            <summary>
            True if no change is repeated more than once.
            </summary>
        </member>
        <member name="P:Bob.TouchBase.is_quarter_peal_true">
            <summary>
            True if this touch could be rung for a quarter peal (i.e. no change is rung more than one more time than any other).
            </summary>
        </member>
        <member name="F:Bob.TouchBase.comes_round">
            <summary>
            Set to true if the touch comes round, otherwise false.
            </summary>
        </member>
        <member name="M:Bob.TouchBase.ComputeChangeRepeatFrequencies">
            <summary>
            Generates the dictionary of change repeats (could be computationally intensive for long touches).
            </summary>
        </member>
        <member name="M:Bob.TouchBase.ComputeAll">
            <summary>
            Computes changes and the change repeat frequencies needed to determine falseness.
            </summary>
        </member>
        <member name="M:Bob.TouchBase.GetSegment(System.Int32,System.Int32)">
            <summary>
            Gets a segment of this touch.
            </summary>
            <param name="start_index">The index of the start of the segment.</param>
            <param name="length">The length of the requested segment.</param>
            <returns>The <see cref="T:Bob.TouchSegment"/> of that region.</returns>
        </member>
        <member name="M:Bob.TouchBase.ToString">
            <summary>
            Returns a string representing this touch (could be very large for long touches).
            </summary>
            <returns>A string representation of this touch.</returns>
        </member>
        <member name="M:Bob.TouchBase.LeadEndString(System.Boolean)">
            <summary>
            Gets a string representing this touch, but only by lead ends.
            </summary>
            <returns>The lead ends of the touch, along with calls.</returns>
        </member>
        <member name="M:Bob.TouchBase.ComputeChanges">
            <summary>
            A function to populate the changes array.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bob.TouchBase.stage">
            <summary>
            The stage of this touch.
            </summary>
        </member>
        <member name="T:Bob.CalledChangeTouch">
            <summary>
            An object which stores a touch of called changes, and can run falseness checks.
            </summary>
        </member>
        <member name="P:Bob.CalledChangeTouch.stage">
            <summary>
            Gets the stage of this touch of called changes.
            </summary>
        </member>
        <member name="F:Bob.CalledChangeTouch.called_changes">
            <summary>
            List of the called changes in this touch.
            </summary>
        </member>
        <member name="M:Bob.CalledChangeTouch.ComputeChanges">
            <summary>
            Computes the array of changes in this set of called changes.
            </summary>
            <returns>A change array caused by calling these called changes.</returns>
        </member>
        <member name="M:Bob.CalledChangeTouch.#ctor(Bob.Stage,Bob.CalledChange[])">
            <summary>
            Creates a new touch of called changes.
            </summary>
            <param name="stage">The stage of bells on which this touch should be rung.</param>
            <param name="called_changes">The called changes which make up the touch.</param>
        </member>
        <member name="T:Bob.TouchSegment">
            <summary>
            A class to represent a segment of a larger touch (e.g. for proving falseness of sections).
            </summary>
        </member>
        <member name="P:Bob.TouchSegment.stage">
            <summary>
            The stage of this touch segment.
            </summary>
        </member>
        <member name="M:Bob.TouchSegment.ComputeChanges">
            <summary>
            Computes the changes in this touch (just returns the stored value).
            </summary>
            <returns>The changes of this touch.</returns>
        </member>
        <member name="M:Bob.TouchSegment.#ctor(Bob.TouchBase,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Bob.TouchSegment"/> class from another <see cref="T:Bob.TouchBase"/> object.
            </summary>
            <param name="original_touch"></param>
            <param name="start_index"></param>
            <param name="length"></param>
        </member>
        <member name="M:Bob.TouchSegment.#ctor(Bob.Stage,Bob.Change[])">
            <summary>
            Explicitly creates a <see cref="T:Bob.TouchSegment"/> object.
            </summary>
            <param name="stage">The stage of the original touch.</param>
            <param name="changes">The changes in this touch segment.</param>
        </member>
        <member name="T:Bob.Utils">
            <summary>
            A class to store utility functions.
            </summary>
        </member>
        <member name="T:Bob.Utils.GetMeOutOfHereException">
            <summary>
            Exception to allow jumping out of two for loops.
            </summary>
        </member>
        <member name="M:Bob.Utils.StageToString(Bob.Stage)">
            <summary>
            Converts a <see cref="T:Bob.Stage"/> to a string.
            </summary>
            <param name="stage">The <see cref="T:Bob.Stage"/> who's string representation is needed.</param>
            <returns>A string representing the given stage.</returns>
        </member>
        <member name="M:Bob.Utils.StringToStage(System.String)">
            <summary>
            Converts a string to its respective <see cref="T:Bob.Stage"/>.
            </summary>
            <param name="name">The name of the stage as a string.</param>
            <returns>The <see cref="T:Bob.Stage"/> who's name is `name`.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the stage can't be found.</exception>
        </member>
        <member name="M:Bob.Utils.ClassificationToString(Bob.Classification)">
            <summary>
            Converts a <see cref="T:Bob.Classification"/> to a string.
            </summary>
            <param name="classification">The <see cref="T:Bob.Classification"/> who's string representation is needed.</param>
            <returns>A string representing the given Classification</returns>
        </member>
        <member name="M:Bob.Utils.StringToClassification(System.String)">
            <summary>
            Converts a string to its respective <see cref="T:Bob.Classification"/>.
            </summary>
            <param name="name">The name of the classification as a string.</param>
            <returns>The <see cref="T:Bob.Classification"/> who's name is `name`.</returns>
        </member>
        <member name="M:Bob.Utils.GetStageOfMethodFromMethodTitle(System.String)">
            <summary>
            Gets the stage of a method, given its title as a string.
            </summary>
            <param name="title">The title of the method whos name you want.</param>
            <returns>The stage of the method, or throws an <see cref="T:System.ArgumentException"/> exception.</returns>
        </member>
        <member name="M:Bob.Utils.Factorial(System.Int32)">
            <summary>
            Computes the factorial of an integer `n`.  Please do NOT put large numbers into this function, or your computer will crash.
            </summary>
            <param name="n">The integer who's factorial is required.</param>
            <returns>The factoral of that integer.</returns>
        </member>
    </members>
</doc>
